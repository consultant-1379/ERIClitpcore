# pylint: disable=E1101,C0103,C0111
# revision identifiers, used by Alembic.
revision = 'b0ce3f579aee'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic then adjusted... ###
    op.create_table('extensions',
        sa.Column('name', sa.Unicode(), nullable=False),
        sa.Column('classpath', sa.Unicode(), nullable=False),
        sa.Column('version', sa.Unicode(), nullable=False),
        sa.PrimaryKeyConstraint('name', name=op.f('pk_extensions')))
    op.create_index(op.f('ix_extensions_classpath'),
        'extensions', ['classpath'], unique=True)

    op.create_table('model',
        sa.Column('model_id', sa.Unicode(), nullable=False),
        sa.Column('vpath', sa.Unicode(), nullable=False),
        sa.Column('class_name',
            sa.Enum(
                u'ModelItem',
                u'CollectionItem',
                u'RefCollectionItem',
                name='mi_class_names',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('item_type_id', sa.Unicode(), nullable=False),
        sa.Column('item_id', sa.Unicode(), nullable=False),
        sa.Column('parent_vpath', sa.Unicode(), nullable=True),
        sa.Column('source_vpath', sa.Unicode(), nullable=True),
        sa.Column('properties', sa.UnicodeText(), nullable=True),
        sa.Column('applied_properties', sa.UnicodeText(), nullable=True),
        sa.Column('state',
            sa.Enum(
                u'Initial',
                u'Applied',
                u'Updated',
                u'ForRemoval',
                u'Removed',
                name='mi_states',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('previous_state',
            sa.Enum(
                u'Initial',
                u'Applied',
                u'Updated',
                u'ForRemoval',
                u'Removed',
                name='mi_previous_states',
                convert_unicode=True,
                native_enum=False),
            nullable=True),
        sa.Column('applied_properties_determinable',
            sa.Boolean(name='mi_applied_properties_determinable'),
            nullable=False),
        sa.PrimaryKeyConstraint('model_id', 'vpath', name=op.f('pk_model')))
    op.create_index('idx_item_type_id', 'model', ['item_type_id'],
                    unique=False)
    op.create_index('idx_model_id_item_type_id', 'model',
                    ['model_id', 'item_type_id', 'vpath'], unique=False)
    op.create_index('idx_model_id_parent_vpath', 'model',
                    ['model_id', 'parent_vpath', 'vpath'], unique=False)
    op.create_index('idx_model_id_source_vpath', 'model',
                    ['model_id', 'source_vpath', 'vpath'], unique=False)
    op.create_index('idx_model_id_state', 'model',
                    ['model_id', 'state', 'vpath'], unique=False)

    op.create_table('plans',
        sa.Column('id', sa.Unicode(), nullable=False),
        sa.Column('class_name',
            sa.Enum(
                u'Plan',
                u'SnapshotPlan',
                name='plan_class_names',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('state',
            sa.Enum(
                u'uninitialised',
                u'initial',
                u'running',
                u'stopping',
                u'stopped',
                u'failed',
                u'successful',
                u'invalid',
                name='plan_states',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('plan_type', sa.Unicode(), nullable=True),
        sa.Column('snapshot_type', sa.Unicode(), nullable=True),
        sa.Column('current_phase', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_plans')))

    op.create_table('plugins',
        sa.Column('name', sa.Unicode(), nullable=False),
        sa.Column('classpath', sa.Unicode(), nullable=False),
        sa.Column('version', sa.Unicode(), nullable=False),
        sa.PrimaryKeyConstraint('name', name=op.f('pk_plugins')))
    op.create_index(op.f('ix_plugins_classpath'), 'plugins', ['classpath'],
                    unique=True)

    op.create_table('tasks',
        sa.Column('id', sa.Unicode(), nullable=False),
        sa.Column('class_name',
            sa.Enum(
                u'ConfigTask',
                u'CallbackTask',
                u'RemoteExecutionTask',
                u'CleanupTask',
                name='task_class_names',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('item', sa.Unicode(), nullable=False),
        sa.Column('description', sa.Unicode(), nullable=True),
        sa.Column('state',
            sa.Enum(
                u'Initial',
                u'Running',
                u'Stopped',
                u'Failed',
                u'Success',
                name='task_states',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('model_items', sa.UnicodeText(), nullable=True),
        sa.Column('dependencies', sa.UnicodeText(), nullable=True),
        sa.Column('lock_type',
            sa.Enum(
                u'type_lock',
                u'type_unlock',
                u'type_other',
                name='task_lock_types',
                convert_unicode=True,
                native_enum=False),
            nullable=False),
        sa.Column('locked_node', sa.Unicode(), nullable=True),
        sa.Column('group', sa.Unicode(), nullable=True),
        sa.Column('args', sa.UnicodeText(), nullable=True),
        sa.Column('kwargs', sa.UnicodeText(), nullable=True),
        sa.Column('unique_id', sa.Unicode(), nullable=True),
        sa.Column('node', sa.Unicode(), nullable=True),
        sa.Column('call_type', sa.Unicode(), nullable=True),
        sa.Column('call_id', sa.Unicode(), nullable=True),
        sa.Column('dep_unique_ids', sa.UnicodeText(), nullable=True),
        sa.Column('replaces', sa.UnicodeText(), nullable=True),
        sa.Column('persist', sa.Boolean(name="task_persist"), nullable=True),
        sa.Column('plugin_class', sa.Unicode(), nullable=True),
        sa.Column('callback_name', sa.Unicode(), nullable=True),
        sa.Column('agent', sa.Unicode(), nullable=True),
        sa.Column('action', sa.Unicode(), nullable=True),
        sa.Column('nodes', sa.UnicodeText(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks')))
    op.create_index(op.f('ix_tasks_unique_id'), 'tasks', ['unique_id'],
                    unique=False)

    op.create_table('persisted_tasks',
        sa.Column('task_id', sa.Unicode(), nullable=False),
        sa.Column('hostname', sa.Unicode(), nullable=False),
        sa.Column('task_seq_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['task_id'], ['tasks.id'],
                            name=op.f('fk_persisted_tasks_task_id_tasks'),
                            ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('task_id', name=op.f('pk_persisted_tasks')))
    op.create_index('idx_persisted_task_hostname_task_seq_id',
                    'persisted_tasks', ['hostname', 'task_seq_id'],
                    unique=True)

    op.create_table('plan_tasks',
        sa.Column('task_id', sa.Unicode(), nullable=False),
        sa.Column('plan_id', sa.Unicode(), nullable=False),
        sa.Column('phase_seq_id', sa.Integer(), nullable=False),
        sa.Column('task_seq_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['plan_id'], ['plans.id'],
                            name=op.f('fk_plan_tasks_plan_id_plans'),
                            onupdate='CASCADE', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['task_id'], ['tasks.id'],
                            name=op.f('fk_plan_tasks_task_id_tasks'),
                            ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('task_id', name=op.f('pk_plan_tasks')))
    op.create_index('idx_plan_task_task_order', 'plan_tasks',
                    ['phase_seq_id', 'task_seq_id'], unique=True)
    ### end Alembic commands ###


def downgrade():
    raise NotImplementedError("No downgrades.")
    # pylint: disable=W0101
    ### commands auto generated by Alembic then adjusted... ###
    op.drop_index('idx_plan_task_task_order', table_name='plan_tasks')
    op.drop_table('plan_tasks')
    op.drop_index('idx_persisted_task_hostname_task_seq_id',
                  table_name='persisted_tasks')
    op.drop_table('persisted_tasks')
    op.drop_index(op.f('ix_tasks_unique_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_plugins_classpath'), table_name='plugins')
    op.drop_table('plugins')
    op.drop_table('plans')
    op.drop_index('idx_model_id_state', table_name='model')
    op.drop_index('idx_model_id_source_vpath', table_name='model')
    op.drop_index('idx_model_id_parent_vpath', table_name='model')
    op.drop_index('idx_model_id_item_type_id', table_name='model')
    op.drop_index('idx_item_type_id', table_name='model')
    op.drop_table('model')
    op.drop_index(op.f('ix_extensions_classpath'), table_name='extensions')
    op.drop_table('extensions')
    ### end Alembic commands ###
