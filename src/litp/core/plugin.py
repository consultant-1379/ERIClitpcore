##############################################################################
# COPYRIGHT Ericsson AB 2013
#
# The copyright to the computer program(s) herein is the property of
# Ericsson AB. The programs may be used and/or copied only with written
# permission from Ericsson AB. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
##############################################################################

# The following import allows other projects to import PluginError from
# this module as they used to do before it was moved to litp.core.exceptions
from litp.core.exceptions import PluginError  # pylint: disable=W0611


class Plugin(object):
    """
    This is the base class which all LITP plugins must extend in order to
    deliver task generation and Deployment Model validation functionality.
    """

    def register_property_types(self):
        """
        return: a list of PropertyType objects unique to this plugin.
        """
        return []

    def register_item_types(self):
        """
        return: a list of ItemType objects unique to this plugin.
        """
        return []

    def validate_model_snapshot(self, plugin_api_context):
        """
        Performs plugin-specific snapshot validation of the Deployment Model
        using the plugin context API object passed by the Execution Manager.

        Snapshot validation is performed before the snapshot tasks are
        generated from the :func:`create_snapshot_plan` method.
        Task generation will be performed only
        if :func:`validate_model_snapshot` returns an empty list of
        :class:`litp.core.validators.ValidationError` for all plugins.

        :param plugin_api_context: An instance of PluginApiContext through \
                which validate_model_snapshot can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext

        :returns:   A list of :class:`litp.core.validators.ValidationError` \
                    objects for each problem found. An empty list means the \
                    model is valid for this plugin.
        :rtype: list
        """
        return []

    def validate_model(self, plugin_api_context):
        """
        Performs  plugin-specific validation of the Deployment Model using \
        the plugin context API object passed by the Execution Manager.

        This method is executed by the Execution Manager for all plugins when a
        plan is created, before tasks are generated (see
        :func:`create_configuration`). Task generation will be performed only
        if :func:`validate_model` returns an empty list of
        :class:`litp.core.validators.ValidationError` for all plugins.

        :param plugin_api_context: An instance of PluginApiContext through \
                which validate_model can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext

        :returns:   A list of :class:`litp.core.validators.ValidationError` \
                    objects for each problem found. An empty list means the \
                    model is valid for this plugin.
        :rtype: list
        """
        return []

    def create_configuration(self, plugin_api_context):
        """
        Using the plugin context API object passed by the Execution Manager,
        query the Deployment Model for additions, updates, and removals
        relevant to this plugin and generate tasks.

        This method is run by the Execution Manager for all plugins when a plan
        is created, after model validation has been performed successfully by
        all plugins (see :func:`validate_model`). The tasks generated by
        plugins are sorted topologically according to the deployment model
        items to which they are attached, and executed when the plan is run.
        Therefore, :func:`create_configuration` by itself does not effect
        changes to the management server or peer servers. A plugin can also
        generate an OrderedTaskList task which contains a list of explicitly
        ordered tasks and therefore these are not topologically sorted
        afterwards.

        :param plugin_api_context: An instance of PluginApiContext through \
                which validate_model can access the deployment model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext

        :returns: A list of :class:`litp.core.task.ConfigTask`, \
                :class:`litp.core.task.CallbackTask`, \
                :class:`litp.core.task.RemoteExecutionTask` or \
                :class:`litp.core.task.OrderedTaskList` objects \
                to be added to a new plan.
        :rtype: list
        """
        return []

    def create_lock_tasks(self, plugin_api_context, node):
        """
        This method is run by the Execution Manager for all plugins when a plan
        is created; for the nodes that need to be locked.

        :param plugin_api_context: An instance of PluginApiContext through \
                which create_lock_tasks can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext
        :param node: The node that needs to be locked.
        :type node: litp.core.model_manager.QueryItem

        :returns: A tuple with 2 items of \
                :class:`litp.core.task.ConfigTask`, \
                :class:`litp.core.task.CallbackTask` or \
                :class:`litp.core.task.RemoteExecutionTask` objects in \
                the order of (lock_task, unlock_task).
        :rtype: tuple
        """
        return tuple()

    def create_snapshot_plan(self, plugin_api_context):
        """
        Using the plugin context API object passed by the Execution Manager,
        query the Deployment Model for additions, updates, and removals
        relevant to this plugin and generate tasks.

        This method is run by the Execution Manager for all plugins when a
        snapshot is created, after model validation has been performed
        successfully by all plugins (see :func:`validate_model`).
        The tasks generated by plugins are sorted topologically according to
        the Deployment Model items to which they are attached and
        executed when the plan is run.
        Therefore, :func:`create_configuration` by itself does not effect
        changes to the Management Server of Managed Nodes.

        :param plugin_api_context: An instance of PluginApiContext through \
                which validate_model can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext

        :returns: A list of :class:`litp.core.task.ConfigTask`, \
                :class:`litp.core.task.CallbackTask` or \
                :class:`litp.core.task.RemoteExecutionTask` objects \
                to be added to a new plan.
        :rtype: list
        """
        return []

    def get_security_credentials(self, plugin_api_context):
        """
        Registers properties for which plugin needs security credentials.

        Checks that credentials exist and are valid.

        :param plugin_api_context: An instance of PluginApiContext through \
            which get_security_credentials can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext

        :returns: A list of pairs (user, service)
        :rtype: list
        """
        return []

    def update_model(self, plugin_api_context):
        """
        Performs  plugin-specific updates to the Deployment Model using \
        the plugin context API object passed by the Execution Manager.

        This method is executed by the Execution Manager for all plugins when a
        plan is created, before model validation (see
        :func:`validate_model`) and task generation (see
        :func:`create_configuration`).
        Model validation will be performed only
        if :func:`update_model` returns without any exceptions for all plugins.

        :param plugin_api_context: An instance of PluginApiContext through \
                which update_model can access the Deployment Model.
        :type plugin_api_context: litp.core.plugin_context_api.PluginApiContext
        """
        pass
