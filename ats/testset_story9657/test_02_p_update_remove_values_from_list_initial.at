# test_02_p_update_remove_values_from_list
# ========================================
# Description:
# Test operations possible on dependency_list
# -remove cluster(s) from list
# -add cluster(s) to the list
# -remove all values for the list resulting
# in an empty list

# Actions:
# 1. Create a deployment with multiple clusters
# 2. Add a cluster to the "dependency_list" property
# 3. Follow the steps
# 4. After plan is created, check that
# the tasks are ordered as per the order
# in the "dependency_list" property
# 5. Update the "dependency_list" property to add
# a cluster
# 6. Recreate the plan
# 7. After plan is created, check that
# the tasks are ordered as per the order
# in the "dependency_list" property
# 8. Update the "dependency_list" property to remove
# a cluster
# 9. Recreate the plan
# 10.After plan is created, check that
# the tasks are ordered as per the order
# in the "dependency_list" property
# 11.Update the "dependency_list" property to remove
# all clusters
# 12. Recreate the plan
# 13.After  plan is created, check that
# the tasks are ordered as per the default mechanism
# 14.Run the plan

# Result:
# Plan is successful

# 1, 2 & 3. Create cluster with multi deployment, define dependencies and create configurations
add-extensions ../plugins/dummy_9657
add-plugins ../plugins/dummy_9657
runLitpScript misc/create_multi_cluster_deployment.inc

# 4. Create plan and check order
# Order: cluster_3 -> cluster_2 -> cluster_1 -> cluster_alpha -> cluster_no_ha -> cluster_zulu
litp create_plan

let __task_n1_c3 ConfigTask c3-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_3/nodes/node1/items/foo1
let __task_n2_c3 ConfigTask c3-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_3/nodes/node2/items/foo1

let __task_n1_c2 ConfigTask c2-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_2/nodes/node1/items/foo1
let __task_n2_c2 ConfigTask c2-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_2/nodes/node2/items/foo1

let __task_n1_c1 ConfigTask c1-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_1/nodes/node1/items/foo1
let __task_n2_c1 ConfigTask c1-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_1/nodes/node2/items/foo1

let __task_n1_ca ConfigTask ca-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_alpha/nodes/node1/items/foo1
let __task_n2_ca ConfigTask ca-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_alpha/nodes/node2/items/foo1

let __task_n1_cnha ConfigTask c-no-ha-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_no_ha/nodes/node1/items/foo1
let __task_n2_cnha ConfigTask c-no-ha-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_no_ha/nodes/node2/items/foo1

let __task_n1_cz ConfigTask cz-node1 foo foo1 /deployments/litpcds_9657/clusters/cluster_zulu/nodes/node1/items/foo1
let __task_n2_cz ConfigTask cz-node2 foo foo1 /deployments/litpcds_9657/clusters/cluster_zulu/nodes/node2/items/foo1

# Expected order: cluster_3 -> cluster_2 -> cluster_1 -> cluster_alpha -> cluster_no_ha -> cluster_zulu
assertTaskBeforeTask  __task_n1_c3 __task_n1_c2 __task_n1_c1 __task_n1_ca __task_n1_cnha __task_n1_cz
assertTaskBeforeTask  __task_n2_c3 __task_n2_c2 __task_n2_c1 __task_n2_ca __task_n2_cnha __task_n2_cz


# 5. Update the "dependency_list" property to add a cluster
litp update -p /deployments/litpcds_9657/clusters/cluster_zulu -o dependency_list="cluster_1"

# 6. Recreate plan
litp create_plan

# 7. Check new order
# Expected order: cluster_3 -> cluster_2 -> cluster_1 -> cluster_zulu -> cluster_alpha -> cluster_no_ha
assertTaskBeforeTask  __task_n1_c3 __task_n1_c2 __task_n1_c1 __task_n1_cz __task_n1_ca __task_n1_cnha
assertTaskBeforeTask  __task_n2_c3 __task_n2_c2 __task_n2_c1 __task_n2_cz __task_n2_ca __task_n2_cnha

# 8. Update the "dependency_list" property to remove a cluster
litp update -p /deployments/litpcds_9657/clusters/cluster_2 -o dependency_list=''

# 9. Recreate plan
litp create_plan

# 10. Check new order
# Expected order: cluster_2 -> cluster_1 -> cluster_zulu -> cluster_3 -> cluster_alpha -> cluster_no_ha
# cluster_zulu and cluster_1 and dependent on cluster_1. All others are independent
assertTaskBeforeTask  __task_n1_c2 __task_n1_c1 __task_n1_cz __task_n1_c3 __task_n1_ca __task_n1_cnha
assertTaskBeforeTask  __task_n2_c2 __task_n2_c1 __task_n2_cz __task_n2_c3 __task_n2_ca __task_n2_cnha

# 11.Update the "dependency_list" property to remove all clusters
litp update -p /deployments/litpcds_9657/clusters/cluster_1 -d dependency_list
litp update -p /deployments/litpcds_9657/clusters/cluster_3 -d dependency_list
litp update -p /deployments/litpcds_9657/clusters/cluster_zulu -d dependency_list

# 12. Recreate the plan
litp create_plan

# 13.After plan is created, check that the tasks are ordered as per the default mechanism
# No dependencies defined in deployement - Lexical order applies:
# Expected order: cluster_1 -> cluster_2 -> cluster_3 -> cluster_alpha -> cluster_no_ha -> cluster_zulu
assertTaskBeforeTask  __task_n1_c1 __task_n1_c2 __task_n1_c3 __task_n1_ca __task_n1_cnha __task_n1_cz
assertTaskBeforeTask  __task_n2_c1 __task_n2_c2 __task_n2_c3 __task_n2_ca __task_n2_cnha __task_n2_cz

# 14.Run the plan, no errors
litp run_plan
