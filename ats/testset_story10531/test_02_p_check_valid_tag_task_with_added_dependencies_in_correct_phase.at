# Test Case 02.

# Description
## Test that on creating a plan with deployment ruleset defined and tasks' tag
# are set and valid, and tasks have valid dependencies, the tasks will be
# assigned to the appropriate task group based on the ruleset and will be
# ordered in the correct phase.
# The tasks dependencies will be setup for:
# - direct 'task-to-task' dependency within the same plugin
# - ConfigTask dependency using call type/id between two different plugins.
# - 'queryItem' dependency.
# Test setup will include two clusters and two plugins and lock/unlock tasks
#
# Actions:
# 1. Setup test configuration to include two clusters and two plugins
# 1.1 Each plugin returns tagged tasks in different groups
# 1.2 Valid direct 'task-to-task' dependency between two tasks from same plugin
# 1.3 Valid 'ConfigTask' dependency using call type/id will be set between 2 tasks
#     from the different plugins
# 1.4 Valid 'queryItem' dependency between a tagged task generated from a plugin
#     and a model item extended by a different plugin
# 1.5 Define second cluster with HA manager to allow for lock/unlock tasks
# 2. Create model items
# 2.1 Create a model item (item1) that generates tasks dependencies as follows:
#     - one task depending directly on another task with same group and from
#       same plugin
#     - one task depending on a config task created by the second plugin using
#       call type and call id
#     - one task depending on a query item (item4)
# 2.2 Create a model item (item2) with tasks generated by second plugin for
#     cluster1, node1 to be used as Config Task dependency
# 2.3 Create a model item (item3) with tasks generated by second plugin for
#     cluster2, node3
# 2.4 Create a model item (item4) with tasks generated by second plugin to be
#     used as 'queried item' for task dependency
# 3. Execute "create_plan" command
# 4. Check that tagged tasks are in the correct order and phases of the plan
# 4.1 Check that tagged tasks for item1 generated by first plugin are in correct
#     phase for cluster1
# 4.2 Check that tagged tasks for item2 generated by second plugin are in correct
#     phase for cluster1
# 4.3 Check that tagged tasks for item3 generated by second plugin are in correct
#     phase for cluster2
# 4.4 Check that tagged tasks for item4 generated by second plugin are in correct
#     phase
# 4.5 Check that tasks with direct 'task-to-task' dependencies are in correct order
# 4.6 Check that tasks with 'config task' dependencies using call type/id are in
#     correct order
# 4.7 Check that tasks with 'queryItem' dependencies are in correct order
# 5. Execute "run_plan" command to have the nodes in applied state
# 6. Create and inherit another item (item5) for cluster 2 to have lock/unlock tasks
# 7. Execute "create_plan" command
# 8. Check tagged tasks for item5 are in the correct phases and that lock/unlock
#    tasks are present
#
# Result:
# On plan creation, tagged tasks with added dependencies are in the correct phase
# and sequenced in the correct order as per the deployment ruleset


# Prerequisites
# 1. Setup test configuration to include two clusters and two plugins
# 1.1 Each plugin returns tagged tasks in different groups
# 1.2 Valid direct 'task-to-task' dependency between two tasks from same plugin
# 1.3 Valid 'ConfigTask' dependency using call type/id will be set between 2 tasks from the different plugins
# 1.4 Valid 'queryItem' dependency between a tagged task generated from a plugin and a model item extended by a different plugin
add-extensions extensions/story10531_extension
add-plugins plugins/story10531_plugin
add-plugins plugins/story10531_plugin_2

# Define first cluster
runLitpScript ../include/two_nodes.at
# 1.5 Define second cluster with HA manager to allow for lock/unlock taskis
litp create -p /infrastructure/systems/system3 -t system -o system_name='SYS3'
litp create -p /infrastructure/systems/system3/disks/disk0 -t disk -o name='disk0' size='1G' uuid='foo'
litp create -p /infrastructure/systems/system3/controllers/c1 -t controller-base

litp create -p /infrastructure/systems/system4 -t system -o system_name='SYS4'
litp create -p /infrastructure/systems/system4/disks/disk0 -t disk -o name='sdb' size='1G' uuid='foo'
litp create -p /infrastructure/systems/system4/controllers/c1 -t controller-base

litp create -p /deployments/local/clusters/cluster2 -t cluster -o ha_manager=vcs
# Cluster1 has no HA manager, and therefore no lock/unlock tasks
#litp update -p /deployments/local/clusters/cluster1 -o dependency_list=cluster2

litp create -p /deployments/local/clusters/cluster2/nodes/node3 -t node -o hostname='node3'
litp inherit -p /deployments/local/clusters/cluster2/nodes/node3/system -s /infrastructure/systems/system3
litp inherit -p /deployments/local/clusters/cluster2/nodes/node3/os -s /software/profiles/rhel_6_2
litp create -p /deployments/local/clusters/cluster2/nodes/node3/network_interfaces/ip1 -t network-interface -o network_name='nodes'

litp create -p /deployments/local/clusters/cluster2/nodes/node4 -t node -o hostname='node4'
litp inherit -p /deployments/local/clusters/cluster2/nodes/node4/system -s /infrastructure/systems/system4
litp inherit -p /deployments/local/clusters/cluster2/nodes/node4/os -s /software/profiles/rhel_6_2
litp create -p /deployments/local/clusters/cluster2/nodes/node4/network_interfaces/ip1 -t network-interface -o network_name='nodes'

litp inherit -p /deployments/local/clusters/cluster2/nodes/node3/storage_profile -s /infrastructure/storage/storage_profiles/profile_1
litp inherit -p /deployments/local/clusters/cluster2/nodes/node4/storage_profile -s /infrastructure/storage/storage_profiles/profile_1

# 2. Create Model items
# 2.1 Create a model item (item1) with tasks dependencies as specified by first plugin
# with one task (task4) depending directly on another task (task5) with same group and from same plugin
# with one task (task5) depending on a config task (task24) created by the second plugin using call type/id
# with one task (task3) depending on a query item (item4)
litp create -p /software/items/item1 -t foo2_1 -o name='item1'
litp inherit -s /software/items/item1 -p /deployments/local/clusters/cluster1/nodes/node1/items/item1

# 2.2 Create a model item (item2) with tasks generated by second plugin for cluster1, node1 to be used as Config Task dependency
litp create -p /software/items/item2 -t foo2_2 -o name='item2'
litp inherit -s /software/items/item2 -p /deployments/local/clusters/cluster1/nodes/node1/items/item2

# 2.3 Create a model item (item3) with tasks generated by second plugin for cluster2, node3
litp create -p /software/items/item3 -t foo2_2 -o name='item3'
litp inherit -s /software/items/item3 -p /deployments/local/clusters/cluster2/nodes/node3/items/item3

# 2.4 Create a model item (item4) generated by second plugin to be used as 'queried item' for task dependency
litp create -p /software/items/item4 -t foo2_3 -o name='item4'
litp inherit -s /software/items/item4 -p /deployments/local/clusters/cluster1/nodes/node1/items/item4

# 3. Execute "create_plan" command
litp create_plan

# 4. Check that tagged tasks are in the correct order and phases of the plan
# 4.1 Check that tagged tasks for item1 generated by first plugin are in correct phase for cluster1
assertTask 0 tc2_res_1_ms node1 /deployments/local/clusters/cluster1/nodes/node1/items/item1 Initial
assertTask 1 tc2_res_2_boot node1 /deployments/local/clusters/cluster1/nodes/node1/items/item1 Initial
assertTask 2 tc2_res_4_node node1 /deployments/local/clusters/cluster1/nodes/node1/items/item1 Initial
assertTask 2 tc2_res_5_node node1 /deployments/local/clusters/cluster1/nodes/node1/items/item1 Initial
assertTask 5 tc2_res_3_cluster node1 /deployments/local/clusters/cluster1/nodes/node1/items/item1 Initial

# 4.2 Check that tagged tasks for item2 generated by second plugin are in correct phase for cluster1
assertTask 0 pg2_res_21_ms node1 /deployments/local/clusters/cluster1/nodes/node1/items/item2 Initial
assertTask 1 pg2_res_22_boot node1 /deployments/local/clusters/cluster1/nodes/node1/items/item2 Initial
assertTask 2 pg2_res_24_node node1 /deployments/local/clusters/cluster1/nodes/node1/items/item2 Initial
assertTask 4 pg2_res_23_cluster node1 /deployments/local/clusters/cluster1/nodes/node1/items/item2 Initial

# 4.3 Check that tagged tasks for item3 generated by second plugin are in correct phase for cluster2
assertTask 0 pg2_res_21_ms node3 /deployments/local/clusters/cluster2/nodes/node3/items/item3 Initial
assertTask 1 pg2_res_22_boot node3 /deployments/local/clusters/cluster2/nodes/node3/items/item3 Initial
assertTask 6 pg2_res_24_node node3 /deployments/local/clusters/cluster2/nodes/node3/items/item3 Initial
assertTask 7 pg2_res_23_cluster node3 /deployments/local/clusters/cluster2/nodes/node3/items/item3 Initial

# 4.4 Check that tagged tasks for item4 generated by second plugin are in correct phase
#assertTask 2 pg2_res_34_node node1 /deployments/local/clusters/cluster1/nodes/node1/items/item4 Initial
assertTask 4 pg2_res_33_cluster node1 /deployments/local/clusters/cluster1/nodes/node1/items/item4 Initial

# Check Order of Plan
let __task3_c1_n1 ConfigTask node1 tc2_res_3_cluster tc2_res_3_cluster_title /deployments/local/clusters/cluster1/nodes/node1/items/item1
let __task4_c1_n1 ConfigTask node1 tc2_res_4_node tc2_res_4_node_title /deployments/local/clusters/cluster1/nodes/node1/items/item1
let __task5_c1_n1 ConfigTask node1 tc2_res_5_node tc2_res_5_node_title /deployments/local/clusters/cluster1/nodes/node1/items/item1
let __task24_c1_n1 ConfigTask node1 pg2_res_24_node pg2_res_24_node_title /deployments/local/clusters/cluster1/nodes/node1/items/item2

let __task32 CallbackTask _mock_function /deployments/local/clusters/cluster1/nodes/node1/items/item4
let __task33_c1_n1 ConfigTask node1 pg2_res_33_cluster pg2_res_33_cluster_title /deployments/local/clusters/cluster1/nodes/node1/items/item4

# 4.5 Check that tasks with direct 'task-to-task' dependencies are in correct order
# task4 'requires' task5
assertTaskBeforeTask __task5_c1_n1 __task4_c1_n1

# 4.6 Check that tasks with 'config task' dependencies using call type/id are in correct order
# task5 'requires' task24 using call type/id
assertTaskBeforeTask __task24_c1_n1 __task5_c1_n1

# 4.7 Check that tasks with 'queryItem' dependencies are in correct order
# task3 'requires' item4 with callback task32 and config task33 generated by second plugin
# assertTaskBeforeTask __task32 __task3_c1_n1
assertTaskBeforeTask __task33_c1_n1 __task3_c1_n1

# 5. Execute "run_plan" command to have the nodes in applied state
litp run_plan

# 6. Create and inherit another item (item5) for cluster 2 to have lock/unlock tasks
litp create -p /software/items/item5 -t foo2_2 -o name='item5'
litp inherit -s /software/items/item5 -p /deployments/local/clusters/cluster2/nodes/node4/items/item5

# 7. Execute "create_plan" command
litp create_plan

# 8. Check tagged tasks for item5 are in the correct phases and that lock/unlock tasks are present
assertTask 0 pg2_res_21_ms node4 /deployments/local/clusters/cluster2/nodes/node4/items/item5 Initial
assertTask 1 pg2_res_22_boot node4 /deployments/local/clusters/cluster2/nodes/node4/items/item5 Initial
assertRemoteExecutionTask 2 /ms node4 lock_unlock lock
assertTask 3 pg2_res_24_node node4 /deployments/local/clusters/cluster2/nodes/node4/items/item5 Initial
assertRemoteExecutionTask 4 /ms node4 lock_unlock unlock
assertTask 5 pg2_res_23_cluster node4 /deployments/local/clusters/cluster2/nodes/node4/items/item5 Initial

